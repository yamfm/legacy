// X Grid
// ~~~~~~

@import '../global/all';

// GRID
[#{$xg-attributeName}~="#{$xg-gridName}"],
[#{$xg-attributeName}*="#{$xg-gridName}-"],
[#{$xg-attributeName}*="#{$xg-gridName}_"]{
  display: flex;
  flex-flow: row wrap;
  margin: 0 (-$xg-gutter/2);
  width: 100%;
}
// COLS
[#{$xg-attributeName}~="#{$xg-colName}"],
[#{$xg-attributeName}*="#{$xg-colName}-"],
[#{$xg-attributeName}*="#{$xg-colName}_"]{
  padding: 0 ($xg-gutter/2) $xg-gutter-vertical;
  max-width: 100%;
}
// JUST "COL" & "COL_"
[#{$xg-attributeName}~="#{$xg-colName}"],
[#{$xg-attributeName}*="#{$xg-colName}_"]{
  flex: 1 1 0%;
}
// JUST "COL-"
[#{$xg-attributeName}*="#{$xg-colName}-"]{
  flex: none;
}

// COL & GRID
[#{$xg-attributeName}~="#{$xg-gridName}"][#{$xg-attributeName}~="#{$xg-colName}"],
[#{$xg-attributeName}~="#{$xg-gridName}"][#{$xg-attributeName}*="#{$xg-colName}-"],
[#{$xg-attributeName}~="#{$xg-gridName}"][#{$xg-attributeName}*="#{$xg-colName}_"],
[#{$xg-attributeName}*="#{$xg-gridName}-"][#{$xg-attributeName}~="#{$xg-colName}"],
[#{$xg-attributeName}*="#{$xg-gridName}-"][#{$xg-attributeName}*="#{$xg-colName}-"],
[#{$xg-attributeName}*="#{$xg-gridName}-"][#{$xg-attributeName}*="#{$xg-colName}_"],
[#{$xg-attributeName}*="#{$xg-gridName}_"][#{$xg-attributeName}~="#{$xg-colName}"],
[#{$xg-attributeName}*="#{$xg-gridName}_"][#{$xg-attributeName}*="#{$xg-colName}-"],
[#{$xg-attributeName}*="#{$xg-gridName}_"][#{$xg-attributeName}*="#{$xg-colName}_"]{
  margin: 0;
  padding: 0;
}

// HELPERS SUFFIXES
// FOR GRID
[#{$xg-attributeName}*="#{$xg-gridName}-"]{
// No spacing between cols : noGutter
  &[#{$xg-attributeName}*="-noGutter"]{
    margin: 0;
    > [#{$xg-attributeName}~="#{$xg-colName}"],
    > [#{$xg-attributeName}*="#{$xg-colName}-"]{
      padding: 0;
    }
  }

// No Wrapping
  &[#{$xg-attributeName}*="-noWrap"]{
    flex-wrap: nowrap;
  }
// Horizontal alignment on center
  &[#{$xg-attributeName}*="-center"]{
    justify-content: center;
  }
// Horizontal alignment on right
  &[#{$xg-attributeName}*="-right"]{
    justify-content: flex-end;
    align-self: flex-end;
    margin-left: auto;
  }
// Vertical alignment on top
  &[#{$xg-attributeName}*="-top"]{
    align-items: flex-start;
  }
// Vertical alignment on middle
  &[#{$xg-attributeName}*="-middle"]{
    align-items: center;
  }
// Vertical alignment on bottom
  &[#{$xg-attributeName}*="-bottom"]{
    align-items: flex-end;
  }

// Orders
  &[#{$xg-attributeName}*="-reverse"]{
    flex-direction: row-reverse;
  }
  &[#{$xg-attributeName}*="-column"] {
    flex-direction: column;
    > [#{$xg-attributeName}*="#{$xg-colName}-"] {
      flex-basis: auto;
    }
  }
  &[#{$xg-attributeName}*="-column-reverse"]{
    flex-direction: column-reverse;
  }

// Spaces between and around cols
  &[#{$xg-attributeName}*="-spaceBetween"]{
    justify-content: space-between;
  }
  &[#{$xg-attributeName}*="-spaceAround"]{
    justify-content: space-around;
  }

// Equal heights columns
  &[#{$xg-attributeName}*="-equalHeight"] > [#{$xg-attributeName}~="#{$xg-colName}"],
  &[#{$xg-attributeName}*="-equalHeight"] > [#{$xg-attributeName}*="#{$xg-colName}-"],
  &[#{$xg-attributeName}*="-equalHeight"] > [#{$xg-attributeName}*="#{$xg-colName}_"]{
    align-self: stretch;
    > *{
      height: 100%;
    }
  }
// Removes the padding-bottom
  &[#{$xg-attributeName}*="-noBottom"] > [#{$xg-attributeName}~="#{$xg-colName}"],
  &[#{$xg-attributeName}*="-noBottom"] > [#{$xg-attributeName}*="#{$xg-colName}-"],
  &[#{$xg-attributeName}*="-noBottom"] > [#{$xg-attributeName}*="#{$xg-colName}_"]{
    padding-bottom: 0;
  }
}

// FOR COL
[#{$xg-attributeName}*="#{$xg-colName}-"]{
  &[#{$xg-attributeName}*="-top"]{
    align-self: flex-start;
  }
  &[#{$xg-attributeName}*="-middle"]{
    align-self: center;
  }
  &[#{$xg-attributeName}*="-bottom"]{
    align-self: flex-end;
  }
}
// GRID BY NUMBER
@include makeGridByNumber(#{$xg-gridName});
@each $mq-key, $mq-value in $xg-mq-list {
  @media #{$mq-value} {
    @include makeGridByNumber(_#{$mq-key});
  }
}

// COLS SIZES
@include makeCol(#{$xg-colName});
@include makeOff(off);
@each $mq-key, $mq-value in $xg-mq-list {
  @media #{$mq-value} {
    @include makeCol(_#{$mq-key});
    @include makeOff(_#{$mq-key});
    @include makeFirstLast(_#{$mq-key});
  }
}

// COLLAPSING COLS
@each $breakpoint in $breakpoints {
  @include breakLessThan($breakpoint) {
    .x-grid--collapsed-#{$breakpoint} {
      display: block !important;
      >[class*='x-col'] {
        max-width: 100%;
        width: 100%;
      }
    }
  }
}

.x-row {
  width: 100%;
}
